exp(summary(log)$coef[2])
shuttle$auto <- as.numeric(shuttle$use=="auto")
fit <- glm(auto ~ wind,  binomial,  shuttle)
fit3 <- glm(1-auto ~ wind,  binomial, shuttle)
fit$coefficients
fit3$coefficients
data(InsectSprays)
head(InsectSprays)
fit <- glm(count ~ spray, data = InsectSprays, family="Poisson")
fit <- glm(count ~ spray, data = InsectSprays, family="poisson")
fit
fit <- glm(count ~ spray - 1, data = InsectSprays, family="poisson")
fit
summary(fit)
summary(fit)$coef
exp(summary(fit)$coef[1])/exp(summary(fit)$coef[2])
exp(summary(fit)$coef[1])
swirl()
var(rpois(1000,50))
swirl()
swirl()
View(hits)
class(hits[,'date]'])
class(hits[,'date])
''
)
;
()
;
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <-
| glm(visits ~ date, poisson, hits)
mdl <- glm(visits ~ date, poisson, hits)
swirl()
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits']
)
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95,lambda)
mdl2 <- glm(visits ~ date, poisson, hits, offset=log(visits+1))
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704]))
qpois(.95, mdl2$fitted.values[704]))
qpois(.95, mdl2$fitted.values[704])
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
fit <- lm(y ~ x)
fit
fit <- lm(x ~ y)
fit
plot(fit)
plot(fit)
summary(fit)
fit <- lm(y ~ x)
fit
summary(fit)
t <- 2
library(AppliedPredictiveModeling)
library(caret)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
training = adData[trainIndex,]
testing = adData[-trainIndex,]
head(training)
head(trainIndex)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
head(trainIndex)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
head(trainIndex)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
head(trainIndex)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
head(trainIndex)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
head(trainIndex)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
head(trainIndex)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
head(trainIndex)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
head(trainIndex)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
View(test)
View(trainIndex)
createDataPartition
?createDataPartition
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
data(AlzheimerDisease)
data(AlzheimerDisease)
head(predictors)
head(diagnosis)
adData = data.frame(predictors)
names(adData)
dim(adData)
adData = data.frame(predictors)
dim(adData)
adData = data.frame(diagnosis,predictors)
dim(adData)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("Hmisc")
dim(training); dim(testing)
head(training)
head(conrete)
head(concrete)
librar(Hmisc)
library(Hmisc)
?cut2
names(training)
qplot(Age,CompressiveStrength,data=training)
qplot(FlyAsh,CompressiveStrength,data=training)
qplot(index,CompressiveStrength,data=training)
plot(training$CompressiveStrength,pch=1,col=cut2(training$FlyAsh,m=20))
plot(training$CompressiveStrength,pch=1,col=cut2(training$FlyAsh,m=20))
plot(training$CompressiveStrength,pch=1,col=cut2(training$Age,m=20))
plot(training$CompressiveStrength,pch=1,col=cut2(training$Age,m=20))
plot(training$CompressiveStrength,pch=1,col=cut2(training$Cement,m=20))
plot(training$CompressiveStrength,pch=1,col=cut2(training$Age,m=20))
plot(training$CompressiveStrength,pch=1,col=cut2(training$Cement,m=20))
plot(training$CompressiveStrength,pch=1,col=cut2(training$FlyAsh,m=20))
cor(training$CompressiveStrength,training$FlyAsh)
plot(training$CompressiveStrength)
plot(training$CompressiveStrength,pch=1,col=cut2(training$FlyAsh,m=20))
plot(training$CompressiveStrength,pch=1,col=cut2(training$Cement,m=20))
plot(training$CompressiveStrength,pch=1,col=cut2(training$Age,m=20))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer)
names(training)
head(training)
hist(training$SuperPlasticizer)
class(names(training))
names(training)
names(training)[1]
names(training)[5]
class(names(training)[5])
training$Superplasticizer <- as.numeric(training$Superplasticizer)
hist(training$SuperPlasticizer)
class(names(training)[5])
training$SuperplasticizerNum <- as.numeric(training$Superplasticizer)
hist(training$SuperplasticizerNum)
log(0)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
cols <- training[, grepl("^IL", names(training))]
subset(names(training),
)
cols <- training[, grepl("^IL", names(training))]
ilcols <- training[,cols]
cols <- training[, grepl("^IL", names(training))]
preProc <- preProcess(log10(cols),method="pca",pcaComp=2)
training[,cols]
cols <- training[, grepl("^IL", names(training))]
cols
preProc <- preProcess(cols,method="pca",pcaComp=2)
ilPC <- predict(preProc,cols)
plot([,1],ilPC[,2],col=typeColor)
plot([,1],ilPC,col=typeColor)
preProcess(cols,method="pca",pcaComp=2)
preProc
preProc
?preProcess
preProcess(cols,method="pca",pcaComp=2,thresh=0.8)
cols <- training[, grepl("^IL", names(training))]
preProcess(cols,method="pca",pcaComp=2,thresh=0.8)
preProc <- preProcess(cols,method="pca",pcaComp=2)
preProc
preProcess(cols,method="pca",pcaComp=2,thresh=0.8)
preProc
preProc <- preProcess(log10(cols+1),method="pca",pcaComp=2)
preProc <- preProcess(log10(cols[]+1),method="pca",pcaComp=2)
preProc <- preProcess(log10(cols+1),method="pca",thresh=0.8)
preObj <- preProcess(cols,method="knnImpute")
preProc <- preProcess(log10(cols+1),method="pca",thresh=0.8)
cols
preProc <- preProcess(cols,method="pca",thresh=0.8)
preProc
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[, grepl("^IL", names(training))]
preProc <- preProcess(trainingIL,method="pca",thresh=0.8)
testPC <- predict(preProc,testing)
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
testPC <- predict(preProc,testing)
testPC <- predict(preProc,testing$diagnosis)
preProcess(trainingIL,method="pca",thresh=0.8)
trainPC <- predict(preProc,trainingIL)
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainingIL)
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainingIL)
head(training$diagnosis)
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainPC)
library(caret)
library(AppliedPredictiveModeling)
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainPC)
install.packages('e1071', dependencies=TRUE)
library(e1071)
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainPC)
testingIL <- testing[, grepl("^IL", names(testing))]
testPC <- predict(preProc,testingIL)
confusionMatrix(testing$diagnosis,predict
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
testPC <- predict(preProc,testingIL)
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
modelFit1 <- train(training$diagnosis ~ ., method="glm", data=trainingIL)
testModelFit1 <- predict(modelFit1, testingIL)
confusionMatrix(testing$diagnosis,predict(modelFit1,testModelFit1))
testModelFit1
modelFit1
predict(modelFit1,testing)
confusionMatrix(testing$diagnosis,predict(modelFit1,testing))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(caret)
data(segmentationOriginal)
data = segmentationOriginal
names(data)
trainIndex = createDataPartition(data$Case, p = 0.70,list=FALSE)
training = data[trainIndex,]
testing = data[-trainIndex,]
seed(125)
set.seed(125)
dim(training); dim(testing)
modFit <- train(Case ~ ., method="rpart", data=training)
library(rattle)
install.packages("rattle")
library(rattle) # for pretty plots
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
modFit$finalModel
head(training$Case)
names(training)
head(training$Class)
modFit <- train(Class ~ ., method="rpart", data=training)
modFit$finalModel
fancyRpartPlot(modFit$finalModel)
print(modFit$finalModel)
head(training$Case)
training = data[Case=Train,]
training = data[data$Case='Train',]
training = data[data$Case=Train,]
training = data[,data$Case=Train]
training = subset(data, data$Case==Train)
training = subset(data, data$Case=='Train')
modFit <- train(Class ~ ., method="rpart", data=training)
print(modFit$finalModel)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
modFit <- train(Area ~ ., method="rpart", data=olive)
names(olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit, newdata)
head(olive)
class(olive$Area)
as.factor(olive$Area)
?olive
library(ElemStatLearn)
install.packages("ElemStatLearn")
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
?SAheart
names(SAheart)
modFit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, family="binomial")
modFit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, family="binomial")
missClass = function(values,prediction){sum
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
## What is the misclassification rate on the training set? What is the
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
;
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd,predict(modFit,testSA))
;
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
?SAheart
set.seed(13234)
modFit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd,predict(modFit,testSA))
missClass(trainSA$chd,predict(modFit,testSA))
missClass(trainSA$chd,predict(modFit,trainSA))
missClass(testSA$chd,predict(modFit,testSA))
predict(modFit,trainSA)
missClass(trainSA,predict(modFit,trainSA))
missClass(trainSA$trainSA,predict(modFit,trainSA))
missClass(trainSA$chd,predict(modFit,trainSA))
missClass(testSA$chd,predict(modFit,testSA))
missClass(predict(modFit,testSA),testSA$chd)
missClass(trainSA$chd,predict(modFit,trainSA))
missClass(testSA$chd,predict(modFit,testSA))
missClass(trainSA$chd,predict(modFit,trainSA))
missClass(testSA$chd,predict(modFit,testSA))
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(modFit,trainSA))
missClass(testSA$chd,predict(modFit,testSA))
missClass(testSA$chd,predict(modFit,trainSA))
?predict
missClass(trainSA$chd,predict(modFit,trainSA))
missClass(testSA$chd,predict(modFit,testSA))
set.seed(13234)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm" family="binomial")
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm", family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(modFit,trainSA))
missClass(testSA$chd,predict(modFit,testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.test)
class(vowel.test$y)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
modFit <- train(y ~ ., data=vowel.train, method="rf", prox=TRUE)
varImp
varImp(modFit)
modFit <- train(y ~ ., data=vowel.train, method="rf")
varImp(modFit)
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
setwd("/Users/Kasim/Dropbox/Coursera/DataScience/9-data-products/slidify")
getwd()
author("Slidify Presentation")
author("presentation")
getwd()
setwd("/Users/Kasim/Dropbox/Coursera/DataScience/9-data-products/slidify")
ls
author("presentation")
job         : Coursera Student
job         :
subtitle    : Coursera's Data Products Course Project Oct 2014
author      : Kasim Te
job         :
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
highlighter : highlight.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow      #
widgets     : []            # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
knit        : slidify::knit2slides
---
## Read-And-Delete
1. Edit YAML front matter
2. Write using R Markdown
3. Use an empty line followed by three dashes to separate slides!
--- .class #id
## Slide 2
library(slidify)
---
;
getwd()
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
getwd()
publish_github(kasimte, coursera-data-products-slidify-presentation)
publish_github(user="kasimte", repo="coursera-data-products-slidify-presentation")
